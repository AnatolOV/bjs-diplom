/*## Выход из личного кабинета
Создайте объект класса `LogoutButton`. В свойство `action` запишите функцию, которая будет вызывать запрос де
авторизации (`logout`). В колбек запроса добавьте проверку: если запрос выполнился успешно, то обновите страницу 
(с помощью `location.reload();`).*/
let logoutButton = new LogoutButton();

logoutButton.action = function log() {
  ApiConnector.logout((response) =>
    response.success == true ? location.reload() : console.log("привет!")
  );
};

/*## Получение информации о пользователе
Выполните запрос на получение текущего пользователя (`current`), в колбеке которого проверьте ответ: если ответ 
успешный, то вызовите метод отображения данных профиля (`ProfileWidget.showProfile`) в который передавайте данные
 ответа от сервера.*/
//logoutButton.action = function req (){

//??? Не понял, запрос на получение текущего пользователя current нужно вызывать в logoutButton, или просто отдельно вызвать метод?
ApiConnector.current((response) => {
  response.success == true
    ? /*console.log(response)*/ProfileWidget.showProfile(response.data)
    : console.log("привет!");
});


/*Создайте объект типа RatesBoard.
Напишите функцию, которая будет выполнять запрос получения курсов валют.
В случае успешного запроса, очищайте таблицу с данными (clearTable) и заполняйте её (fillTable) полученными данными.
Вызовите данную функцию для получения текущих валют.
Напишите интервал, который будет многократно выполняться (раз в минуту) и вызывать вашу функцию с получением валют.*/

let board = new RatesBoard();

function getCurrency () { 
    ApiConnector.getStocks(callback => {
      if (callback.success == true){
        board.clearTable();
        board.fillTable(callback.data);
       // console.log(3);
      }
    });
}

setInterval(getCurrency, 1000);

/*Создайте объект типа MoneyManager
Реализуйте пополнение баланса:
Запишите в свойство addMoneyCallback функцию, которая будет выполнять запрос.
Внутри функции выполните запрос на пополнение баланса (addMoney).
Используйте аргумент функции свойства addMoneyCallback для передачи данных data в запрос.
После выполнения запроса выполните проверку успешности запроса.
В случае успешного запроса отобразите в профиле новые данные о пользователе из данных ответа от сервера (showProfile).
Также выведите сообщение об успехе или ошибку (причину неудачного действия) пополнении баланса в окне отображения сообщения (setMessage).
Реализуйте конвертирование валюты:
Запишите в свойство conversionMoneyCallback функцию, которая будет выполнять запрос.
Внутри функции выполните запрос на конвертацию баланса (convertMoney)
Используйте аргумент функции свойства conversionMoneyCallback для передачи данных в запрос.
Повторите пункты 2.4-2.7
Реализуйте перевод валюты:
Запишите в свойство sendMoneyCallback функцию, которая будет выполнять запрос.
Внутри функции выполните запрос на перевод валюты (transferMoney).
Используйте аргумент функции свойства sendMoneyCallback для передачи данных в запрос.
Повторите пункты 2.4-2.7*/

let manageMoney = new MoneyManager();









